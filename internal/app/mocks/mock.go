// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/supchaser/test_task/internal/app/models"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// AddObject mocks base method.
func (m *MockTaskRepository) AddObject(ctx context.Context, taskID int64, url string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObject", ctx, taskID, url)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddObject indicates an expected call of AddObject.
func (mr *MockTaskRepositoryMockRecorder) AddObject(ctx, taskID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObject", reflect.TypeOf((*MockTaskRepository)(nil).AddObject), ctx, taskID, url)
}

// CreateTask mocks base method.
func (m *MockTaskRepository) CreateTask(ctx context.Context) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryMockRecorder) CreateTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepository)(nil).CreateTask), ctx)
}

// GetActiveTasksCount mocks base method.
func (m *MockTaskRepository) GetActiveTasksCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTasksCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetActiveTasksCount indicates an expected call of GetActiveTasksCount.
func (mr *MockTaskRepositoryMockRecorder) GetActiveTasksCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTasksCount", reflect.TypeOf((*MockTaskRepository)(nil).GetActiveTasksCount))
}

// GetAllTasks mocks base method.
func (m *MockTaskRepository) GetAllTasks(ctx context.Context) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskRepositoryMockRecorder) GetAllTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetAllTasks), ctx)
}

// GetMaxTasks mocks base method.
func (m *MockTaskRepository) GetMaxTasks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxTasks")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxTasks indicates an expected call of GetMaxTasks.
func (mr *MockTaskRepositoryMockRecorder) GetMaxTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetMaxTasks))
}

// GetTask mocks base method.
func (m *MockTaskRepository) GetTask(ctx context.Context, id int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskRepositoryMockRecorder) GetTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskRepository)(nil).GetTask), ctx, id)
}

// UpdateTaskStatus mocks base method.
func (m *MockTaskRepository) UpdateTaskStatus(ctx context.Context, id int64, status models.TaskStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatus indicates an expected call of UpdateTaskStatus.
func (mr *MockTaskRepositoryMockRecorder) UpdateTaskStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatus", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTaskStatus), ctx, id, status)
}

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// AddObject mocks base method.
func (m *MockTaskUsecase) AddObject(ctx context.Context, taskID int64, url string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddObject", ctx, taskID, url)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddObject indicates an expected call of AddObject.
func (mr *MockTaskUsecaseMockRecorder) AddObject(ctx, taskID, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddObject", reflect.TypeOf((*MockTaskUsecase)(nil).AddObject), ctx, taskID, url)
}

// CreateTask mocks base method.
func (m *MockTaskUsecase) CreateTask(ctx context.Context) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUsecaseMockRecorder) CreateTask(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUsecase)(nil).CreateTask), ctx)
}

// GetActiveTasksCount mocks base method.
func (m *MockTaskUsecase) GetActiveTasksCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTasksCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetActiveTasksCount indicates an expected call of GetActiveTasksCount.
func (mr *MockTaskUsecaseMockRecorder) GetActiveTasksCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTasksCount", reflect.TypeOf((*MockTaskUsecase)(nil).GetActiveTasksCount))
}

// GetAllTasks mocks base method.
func (m *MockTaskUsecase) GetAllTasks(ctx context.Context) ([]*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx)
	ret0, _ := ret[0].([]*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskUsecaseMockRecorder) GetAllTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTaskUsecase)(nil).GetAllTasks), ctx)
}

// GetMaxTasks mocks base method.
func (m *MockTaskUsecase) GetMaxTasks() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxTasks")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxTasks indicates an expected call of GetMaxTasks.
func (mr *MockTaskUsecaseMockRecorder) GetMaxTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxTasks", reflect.TypeOf((*MockTaskUsecase)(nil).GetMaxTasks))
}

// GetTask mocks base method.
func (m *MockTaskUsecase) GetTask(ctx context.Context, id int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTaskUsecaseMockRecorder) GetTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTaskUsecase)(nil).GetTask), ctx, id)
}

// GetTaskStatus mocks base method.
func (m *MockTaskUsecase) GetTaskStatus(ctx context.Context, id int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskStatus", ctx, id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskStatus indicates an expected call of GetTaskStatus.
func (mr *MockTaskUsecaseMockRecorder) GetTaskStatus(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskStatus", reflect.TypeOf((*MockTaskUsecase)(nil).GetTaskStatus), ctx, id)
}
